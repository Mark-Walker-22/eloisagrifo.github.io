--Basic computations
restart
k = ZZ/101 -- definining a field
S = k[a,b,c,d,e] -- defining a polynomial ring over that field
(3*a^2+1)^5 --some basic computation
I = ideal(a^3-b^3, a+b+c+d+e) --defining an ideal
R = S/I -- this is the ring S/I
f = c^2+d^2
J = ideal"a,b,c+d+e"
f%J -- is f in J?
isSubset(ideal(f),J)

--Ring maps
restart
k = QQ
R = k[x,y,z]
S = k[s,t]
f = map(S,R,{s^2,s*t,t^2})
ker f
f(x^2+y^2)
R/ker f



--We can determine whether a ring has nice properties:
restart
loadPackage "TorAlgebra"
loadPackage "Depth"
Q = QQ[x,y,z];
isCI (Q/ideal (x^2,y^2))
isCI (Q/ideal (x^2,x*y,y*z,z^2))
isGorenstein (Q/ideal (x^2,x*y,y*z,z^2))
isCM (Q/ideal (x^2,x*y,y*z,z^2))

R = QQ[x,y,z]/ideal(x^6-z^6-y^2*z^4);
isNormal(R)



--Random ideals
restart
loadPackage "RandomIdeals"
kk = ZZ/101
S = kk[a..e]
L = {3,3,4,6} --the degrees of the generators we want
m = matrix{{a^3,b^4+c^4,d^5}} --our generators will be combinations of these
I = randomIdeal(L,m)
f = random(7,S)
f%I
isSubset(ideal(f),I)


--Free resolutions
restart
Q = QQ[x,y,z]
I = ideal(x^2-y^2, x^2-z^2, x*y, y*z, x*z)
pdim I
C = res I
C.dd
mingens I


--Large free resolutions
restart
R = QQ[a..l];--12 vars
-- ideal generated by all
-- products of 2 distinct variables
I = ideal apply(subsets(flatten entries vars R,2),product) 
C = time res I
C.dd_2
(C.dd_5)_(67,601)--there are lots of 0s in these matrices actually
number(flatten entries C.dd_4, i -> i != 0) -- this is the number of nonzero entries in C.dd_4
(numgens target C.dd_5)*(numgens source C.dd_5)--this is the actual number of entries in C.dd_4
loadPackage "FastLinAlg"
time isRankAtLeast(C.dd_5,5)



--primary decompositions
restart
R = QQ[x,y,z]
I = ideal"xy,xz,yz"
decompose I



--Stanley-Reisner rings
restart
R = ZZ[a..e];
loadPackage "SimplicialComplexes"
sphere = simplicialComplex {b*c*d*e,a*c*d*e,a*b*d*e,a*b*c*e,a*b*c*d}
I = ideal sphere
--another example:
--a triangle (on vertices a,b,c), 
--two edges connecting c to d and b to d, 
--and an isolated vertex e.
D = simplicialComplex {e, c*d, b*d, a*b*c}
ideal D


--Graphs and Edge ideals
restart
loadPackage "EdgeIdeals"
S = QQ[z_1..z_8];
E1 = {{z_1,z_2},{z_2,z_3},{z_3,z_4},{z_4,z_5},{z_5,z_6},{z_6,z_7},{z_7,z_8},{z_8,z_1}}
E2 = {{z_1,z_2},{z_2,z_3}}
g1 = graph E1
g2 = graph E2
isConnected g2
isConnected g1--yes!
isBipartite g1--yes!
--We can see this, actually...

--use visualize
loadPackage "Visualize"
openPort("8080")
g1 = graph E1
visualize g1
closePort()




--Rees algebras
restart
loadPackage "ReesAlgebra"
S = QQ[x_0..x_3]
i = monomialCurveIdeal(S,{3,7,8})
mingens i
I = reesIdeal i;
reesAlgebra (i,i_0)




